---
  - name: Provision an EC2 Instance
    hosts: local
    connection: local
    gather_facts: False
    tags: provisioning
    # Necessary Variables for creating/provisioning the EC2 Instance
    vars:
      instance_type: t2.micro
      security_group: ansible-webserver # Change the security group name here
      image: ami-e2021d81 # This is an AMI i created myself
      keypair: Ansible # This is one of my keys that i already have in AWS
      region: ap-southeast-2 # Change the Region
      count: 1

    # Task that will be used to Launch/Create an EC2 Instance
    tasks:

      - name: create key pair
        ec2_key:
          region: "{{ region }}"
          name: "{{ keypair }}"
        register: mykey

      - name: save private key
        copy:
          content: "{{ mykey.key.private_key }}"
          dest: "~/.ssh/{{ keypair }}.pem"
          mode: 0600
        when: mykey.changed

      - name: Create a security group
        local_action:
          module: ec2_group
          name: "{{ security_group }}"
          description: Security Group for webserver Servers
          region: "{{ region }}"
          rules:
            - proto: tcp
              from_port: 22
              to_port: 22
              cidr_ip: 0.0.0.0/0
            - proto: tcp
              from_port: 80
              to_port: 80
              cidr_ip: 0.0.0.0/0
            - proto: tcp
              from_port: 443
              to_port: 443
              cidr_ip: 0.0.0.0/0
          rules_egress:
            - proto: all
              cidr_ip: 0.0.0.0/0
        register: basic_firewall

      - name: Launch the new EC2 Instance
        local_action: ec2
                      group={{ security_group }}
                      instance_type={{ instance_type}}
                      image={{ image }}
                      wait=true
                      region={{ region }}
                      keypair={{ keypair }}
                      count={{count}}
        register: ec2

      - name: Add the newly created EC2 instance(s) to the local host group (located inside the directory)
        local_action: lineinfile
                      dest="./hosts"
                      regexp={{ item.public_ip }}
                      insertafter="[webserver]" line={{ item.public_ip }}
        with_items: "{{ ec2.instances }}"


      - name: Wait for SSH to come up
        local_action: wait_for
                      host={{ item.public_ip }}
                      port=22
                      state=started
        with_items: "{{ ec2.instances }}"

      - name: Add tag to Instance(s)
        local_action: ec2_tag resource={{ item.id }} region={{ region }} state=present
        with_items: "{{ ec2.instances }}"
        args:
          tags:
            Name: webserver
      - name: Add the EC2 instance to the in memory mysql group
        add_host:
          name: "{{ item.public_ip }}"
          groups: webserver
        with_items: "{{ ec2.instances }}"

      - name: Set Database IP fact for later use
        set_fact:
          database_ip: "{{ ec2.instances[0].private_ip }}"

  - name: Setup webserver with Python2 for ansible
    hosts: webserver
    gather_facts: false # won't work until python2 exists
    become: true
    tasks:
      - name: Give AWS time before apt-get update
        raw: sleep 20
      - name: apt-get update
        raw: apt update -y
      - name: Install python 2
        raw: apt install -y python

  - name: Install and Configure webserver
    hosts: webserver
    gather_facts: false
    become: true
    vars:
      wp_mysql_password: 158383Group2

    tasks:
      - name: Set MySQL root password before installing
        debconf: name='mysql-server' question='mysql-server/root_password' value='{{wp_mysql_password | quote}}' vtype='password'
      - name: Confirm MySQL root password before installing
        debconf: name='mysql-server' question='mysql-server/root_password_again' value='{{wp_mysql_password | quote}}' vtype='password'
      - name: Install mysql software
        apt: name={{ item }}
        with_items:
          - mysql-server
          - python-mysqldb
      - name: Delete anonymous MySQL server user for localhost
        mysql_user: user="" state="absent" login_password="{{ wp_mysql_password }}" login_user=root
      - name: Secure the MySQL root user
        mysql_user: user="root" password="{{ wp_mysql_password }}" host="{{ item }}" login_password="{{ wp_mysql_password }}" login_user=root
        with_items:
          - 127.0.0.1
          - localhost
          - ::1
      - name: Removesthe MySQL test database
        mysql_db: db=test state=absent login_password="{{ wp_mysql_password }}" login_user=root

      - name: Create a new database with name 'wordpress'
        mysql_db:
          name: wordpress
          state: present
          login_user: root
          login_password: "{{ wp_mysql_password }}"
      - name: Create wordpress mysql user
        mysql_user:
          name: wordpress
          password: wordpress
          login_user: root
          login_password: "{{ wp_mysql_password }}"
          priv: '*.*:ALL'
          host: '%'
          state: present

      - name: Allow connections to database from wordpress
        #change 127.0.0.1 to 0.0.0.0 in /etc/mysql/mysql.conf.d/mysqld.cnf
        # sudo grep -i bind /etc/mysql/mysql.conf.d/mysqld.cnf
        # bind-address		= 0.0.0.0
        lineinfile:
          path: /etc/mysql/mysql.conf.d/mysqld.cnf
          regexp: '^bind-address'
          line: 'bind-address		= 0.0.0.0'

      - name: Restart mysql
        service:
          name: mysql
          state: restarted

  - name: Configure webserver Instances
    hosts: webserver
    become: true
    gather_facts: false
    vars:
      wordpress_path: /var/www/wordpress

    tasks:
      # install php-fpm for nginx before php.
      # This shoud stop Apache from loading instead of Nginx
      - name: Install nginx and php-fpm
        apt: name={{ item }}
        with_items:
          - nginx
          - php-fpm
      - name: Install php and mysql integration for Wordpress
        apt: name={{ item }}
        with_items:
          - php
          - php-mysql
          - php-curl
          - php-gd

      - name: Create wordpress public and logs directories
        file:
          path: "{{ wordpress_path }}/{{ item }}"
          state: directory
        with_items:
          - public
          - logs

      - name: Create nginx config
        template:
          src: ./templates/nginx_config.j2
          dest: /etc/nginx/sites-available/wordpress.domain
          owner: ubuntu

      - name: Enable the wordpress site
        file:
          src: /etc/nginx/sites-available/wordpress.domain
          dest: /etc/nginx/sites-enabled/wordpress.domain
          state: link

      - name: Delete the default nginx site
        file:
          path: /etc/nginx/sites-available/default
          state: absent

      - name: Restart nginx
        service:
          name: nginx
          state: restarted

      - name: Download the latest wordpress
        get_url:
          url: https://wordpress.org/latest.tar.gz
          dest: /tmp/wordpress.tar.gz
          validate_certs: no

      - name: Extract WordPress
        unarchive:
          extra_opts: ['--strip-components=1']
          src: /tmp/wordpress.tar.gz
          dest: /var/www/wordpress/public
          copy: no          

      - name: Print database private IP
        debug:
          msg: "Database IP: {{ hostvars.localhost.database_ip }}"


      - name: Create WordPress config
        template:
          src: ./templates/wptask1-config.php.j2
          dest: /var/www/wordpress/public/wp-config.php

      - name: Set www owner for wordpress
        file:
          dest: /var/www/wordpress/public
          owner: www-data
          group: www-data

      - name: Setup wordpress with a curl command
        command: >
          curl "http://localhost/wp-admin/install.php?step=2"
          --data-urlencode "weblog_title=wordpress.automation"
          --data-urlencode "user_name=admin"
          --data-urlencode "admin_email=no@spam.org"
          --data-urlencode "admin_password=admin"
          --data-urlencode "admin_password2=admin"
          --data-urlencode "pw_weak=1"
